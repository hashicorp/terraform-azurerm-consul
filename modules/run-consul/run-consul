#!/bin/bash
# This script is used to configure and run Consul on an Azure server.

set -e

readonly CONSUL_CONFIG_FILE="default.json"
readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/run-consul.conf"

readonly AZURE_INSTANCE_METADATA_URL="http://169.254.169.254/metadata/instance?api-version=2017-08-01"
readonly DEFAULT_RAFT_PROTOCOL="3"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-consul [OPTIONS]"
  echo
  echo "This script is used to configure and run Consul on an Azure server."
  echo
  echo "Options:"
  echo
  echo -e "  --server\t\tIf set, run in server mode. Optional. Exactly one of --server or --client must be set."
  echo -e "  --client\t\tIf set, run in client mode. Optional. Exactly one of --server or --client must be set."
  echo -e "  --subscription-id\t\t the Azure Subscription Id. Required."
  echo -e "  --tenant-id\t\t the Azure Tenant Id. Required."
  echo -e "  --client-id\t\t the Azure Client Id. Required."
  echo -e "  --secret-access-key\t\t the Azure Secret Access Key. Required."
  echo -e "  --resource-group-name\t\t the Azure Resource Group to discover consul servers from. Default is the VMs own resource group."
  echo -e "  --config-dir\t\tThe path to the Consul config folder. Optional. Default is the absolute path of '../config', relative to this script."
  echo -e "  --data-dir\t\tThe path to the Consul data folder. Optional. Default is the absolute path of '../data', relative to this script."
  echo -e "  --log-dir\t\tThe path to the Consul log folder. Optional. Default is the absolute path of '../log', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Consul binary. Optional. Default is the absolute path of the parent folder of this script."
  echo -e "  --raft-protocol\tThis controls the internal version of the Raft consensus protocol used for server "
  echo -e "                 \tcommunications. Must be set to 3 in order to gain access to Autopilot features, with the"
  echo -e "                 \texception of cleanup_dead_servers. Default: 3"
  echo -e "  --user\t\tThe user to run Consul as. Optional. Default is to use the owner of --config-dir."
  echo -e "  --skip-consul-config\tIf this flag is set, don't generate a Consul configuration file. Optional. Default is false."
  echo
  echo "Example:"
  echo
  echo "  run-consul --server --config-dir /custom/path/to/consul/config"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

# Based on code from: http://stackoverflow.com/a/16623897/483528
function strip_prefix {
  local readonly str="$1"
  local readonly prefix="$2"
  echo "${str#$prefix}"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function lookup_path_in_instance_metadata {
  local readonly path="$1"
  curl --silent --show-error --header Metadata:true --location "$AZURE_INSTANCE_METADATA_URL" | jq -r "$path"
}

function get_instance_ip_address {
  lookup_path_in_instance_metadata ".network.interface[0].ipv4.ipAddress[0].privateIpAddress"
}

function get_instance_id {
  lookup_path_in_instance_metadata ".compute.vmId"
}

function get_instance_location {
  lookup_path_in_instance_metadata ".compute.location"
}

function get_instance_resource_group {
  lookup_path_in_instance_metadata ".compute.resourceGroupName"
}

function get_instance_name {
  lookup_path_in_instance_metadata ".compute.name"
}

function get_other_scale_set_member_ip {
    local readonly resource_group_name="$1"
    local readonly scale_set_name="$2"
    local readonly my_ip_address="$3"

    ip_list=($(az vmss nic list --resource-group "$resource_group_name" --vmss-name "$scale_set_name" | jq '.[].ipConfigurations[].privateIpAddress'))
    other_ip=""

    for ip in ${ip_list[@]}; do
        if [[ "$my_ip_address" != "$ip" ]]; then
            other_ip="$ip"
        fi
    done

    if [[ -z "$other_ip" ]]; then
        log_warn "This Azure Instance does not appear to be part of a Scale Set, so cannot set retry_join peer."
        echo ""
    else
        echo "$other_ip"
    fi
}

function find_scale_set {
  local readonly resource_group_name="$1"
  local readonly instance_id="$2"

  scale_set_name="unknown"
  log_info "Finding the scale set Instance $instance_id belongs to"
  scale_sets=($(az vmss list | jq -r .[]'.name'))
  for scale_set in ${scale_sets[@]}; do
    local instances=($(az vmss list-instances --resource-group $resource_group_name --name $scale_set | jq -r .[]'.vmId'))
    for instance in ${instances[@]}; do
        if [[ "$instance"==$instance_id ]]; then
            scale_set_name=$scale_set
        fi
    done
  done
  echo "$scale_set_name"
}

function get_scale_set_size {
  local readonly resource_group_name="$1"
  local readonly scale_set_name="$2"
  local vmss_json=""

  log_info "Looking up the size of the Scale Set $scale_set_name in $resource_group_name"
  vmss_json=$(az vmss list-instances --resource-group $resource_group_name --name $scale_set_name)
  echo "$vmss_json" | jq '. | length'
}

function get_cluster_size {
  local readonly resource_group_name="$1"
  local readonly scale_set_name="$2"

  if [[ "$scale_set_name" = "unknown" ]]; then
    log_warn "This Azure Instance does not appear to be part of a Scale Set, so cannot determine cluster size. Setting cluster size to 1."
    echo 1
  else
    get_scale_set_size "$resource_group_name" "$scale_set_name"
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function generate_consul_config {
  local readonly server="$1"
  local readonly raft_protocol="$2"
  local readonly config_dir="$3"
  local readonly user="$4"
  local readonly instance_resource_group="$5"
  local readonly instance_id="$6"
  local readonly scale_set_name="$7"
  local readonly config_path="$config_dir/$CONSUL_CONFIG_FILE"

  local instance_ip_address=""
  local instance_location=""

  instance_ip_address=$(get_instance_ip_address)
  instance_location=$(get_instance_location)
  peer_ip=$(get_other_scale_set_member_ip "$instance_resource_group" "$scale_set_name" "$instance_ip_address")

  local retry_join_json=""
  if [[ -z "$peer_ip" ]]; then
    log_warn "Can not determine another scale set member. Will not automatically try to form a cluster based on Azure scale set."
  else
    retry_join_json=$(cat <<EOF
"retry_join": [$peer_ip],
EOF
)
  fi

  local bootstrap_expect=""
  if [[ "$server" == "true" ]]; then
    local cluster_size=""

    cluster_size=$(get_cluster_size "$instance_resource_group" "$scale_set_name")

    bootstrap_expect="\"bootstrap_expect\": $cluster_size,"
  fi

  log_info "Creating default Consul config file in $config_path"
  cat > "$config_path" <<EOF
{
  "advertise_addr": "$instance_ip_address",
  "bind_addr": "$instance_ip_address",
  $bootstrap_expect
  "client_addr": "0.0.0.0",
  "datacenter": "$instance_location",
  "node_name": "$instance_id",
  $retry_join_json
  "server": $server,
  "ui": true,
  "raft_protocol": $raft_protocol
}
EOF
  chown "$user:$user" "$config_path"
}

function generate_supervisor_config {
  local readonly supervisor_config_path="$1"
  local readonly consul_config_dir="$2"
  local readonly consul_data_dir="$3"
  local readonly consul_log_dir="$4"
  local readonly consul_bin_dir="$5"
  local readonly consul_user="$6"

  log_info "Creating Supervisor config file to run Consul in $supervisor_config_path"
  cat > "$supervisor_config_path" <<EOF
[program:consul]
command=$consul_bin_dir/consul agent -config-dir $consul_config_dir -data-dir $consul_data_dir
stdout_logfile=$consul_log_dir/consul-stdout.log
stderr_logfile=$consul_log_dir/consul-error.log
numprocs=1
autostart=true
autorestart=true
stopsignal=INT
user=$consul_user
EOF
}

function start_consul {
  log_info "Reloading Supervisor config and starting Consul"
  supervisorctl reread
  supervisorctl update
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local readonly path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function do_azure_login {
  local tenant_id="$1"
  local client_id="$2"
  local secret_access_key="$3"
  log_info "Logging into the Azure API as service principal $client_id"
  result=$(az login --service-principal -u "$client_id" -p "$secret_access_key" --tenant "$tenant_id")
}

function run {
  local server="false"
  local client="false"
  local scale_set_name=""
  local config_dir=""
  local data_dir=""
  local log_dir=""
  local bin_dir=""
  local user=""
  local cluster_tag_key="$AZURE_TAG_KEY"
  local cluster_tag_value=""
  local subscription_id=""
  local tenant_id=""
  local client_id=""
  local secret_access_key=""
  local skip_consul_config="false"
  local raft_protocol="$DEFAULT_RAFT_PROTOCOL"
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --scale-set-name)
        assert_not_empty "$key" "$2"
        scale_set_name="$2"
        shift
        ;;
      --resource-group-name)
        assert_not_empty "$key" "$2"
        resource_group="$2"
        shift
        ;;
      --raft-protocol)
        assert_not_empty "$key" "$2"
        raft_protocol="$2"
        shift
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --log-dir)
        assert_not_empty "$key" "$2"
        log_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --skip-consul-config)
        skip_consul_config="true"
        ;;
      --subscription-id)
        assert_not_empty "$key" "$2"
        subscription_id="$2"
        shift
        ;;
      --tenant-id)
        assert_not_empty "$key" "$2"
        tenant_id="$2"
        shift
        ;;
      --client-id)
        assert_not_empty "$key" "$2"
        client_id="$2"
        shift
        ;;
      --secret-access-key)
        assert_not_empty "$key" "$2"
        secret_access_key="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "subscription-id" "$subscription_id"
  assert_not_empty "tenant-id" "$tenant_id"
  assert_not_empty "client-id" "$client_id"
  assert_not_empty "secret-access-key" "$secret_access_key"

  do_azure_login "$tenant_id" "$client_id" "$secret_access_key"

  if [[ ("$server" == "true" && "$client" == "true") || ("$server" == "false" && "$client" == "false") ]]; then
    log_error "Exactly one of --server or --client must be set."
    exit 1
  fi

  if [[ "$client" == "true" && -z "$scale_set_name" ]]; then
    log_error "--scale-set-name must be set if --client is set."
    exit 1
  fi

  assert_is_installed "supervisorctl"
  assert_is_installed "az"
  assert_is_installed "curl"
  assert_is_installed "jq"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ -z "$log_dir" ]]; then
    log_dir=$(cd "$SCRIPT_DIR/../log" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  if [[ "$skip_consul_config" == "true" ]]; then
    log_info "The --skip-consul-config flag is set, so will not generate a default Consul config file."
  else
    instance_id=$(get_instance_id)
  if [[ ! $resource_group ]]; then
    resource_group=$(get_instance_resource_group)
  fi

    if [[ -z "$scale_set_name" ]]; then
      scale_set_name=$(find_scale_set "$resource_group" "$instance_id")
    fi

    generate_consul_config \
        "$server" \
        "$raft_protocol" \
        "$config_dir" \
        "$user" \
        "$resource_group" \
        "$instance_id" \
        "$scale_set_name"
  fi

  generate_supervisor_config "$SUPERVISOR_CONFIG_PATH" "$config_dir" "$data_dir" "$log_dir" "$bin_dir" "$user"
  start_consul
}

run "$@"
